# This workflow will build a docker container, publish it to Azure Container Registry, and deploy it to Azure Kubernetes Service using a helm chart.
#
# https://github.com/Azure/actions-workflow-samples/tree/master/Kubernetes
#
# To configure this workflow:
#
# 1. Set up the following secrets in your workspace:
#     a. REGISTRY_USERNAME with ACR username
#     b. REGISTRY_PASSWORD with ACR Password
#     c. AZURE_CREDENTIALS with the output of `az ad sp create-for-rbac --sdk-auth`
#
# 2. Change the values for the REGISTRY_NAME, CLUSTER_NAME, CLUSTER_RESOURCE_GROUP and NAMESPACE environment variables (below).
name: release
on:
  release:
    types: [published]

# Environment variables available to all jobs and steps in this workflow
env:
  REGISTRY_NAME: k8scc01covidacr
  CLUSTER_NAME: k8s-cancentral-01-covid-aks
  CLUSTER_RESOURCE_GROUP: k8s-cancentral-01-covid-aks
  STORAGE_ACCOUNT_NAME: k8scovid
  NAMESPACE: web
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    # Connect to Azure Container registry (ACR)
    - uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    # Container build and push to a Azure Container registry (ACR)
    - run: |
        docker build -f Dockerfile -t ${{ env.REGISTRY_NAME }}.azurecr.io/dremio:${{ github.sha }} .
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/dremio:${{ github.sha }}
    # Set the target Azure Kubernetes Service (AKS) cluster.
    - uses: azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: ${{ env.CLUSTER_NAME }}
        resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
    # Create imagepullsecret for Azure Container registry (ACR)
    - uses: azure/k8s-create-secret@v1
      with:
        container-registry-url: ${{ env.REGISTRY_NAME }}.azurecr.io
        container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
        container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
        secret-name: ${{ env.REGISTRY_NAME }}-registry-connection
        namespace: ${{ env.NAMESPACE }}
    # Scan image for vulnerabilities
    - name: Scan image for vulnerabilities
      uses: docker://docker.io/aquasec/trivy:0.2.1
      with:
        args: --cache-dir /var/lib/trivy --severity CRITICAL --no-progress ${{ env.REGISTRY_NAME }}.azurecr.io/dremio:${{ github.sha }}
    # Clone the Helm chart
    - run: |
        git clone https://github.com/statcan/charts.git
        mkdir -p /home/runner/work/_temp/_github_home/
        cp $KUBECONFIG /home/runner/work/_temp/_github_home/KUBECONFIG
    # Deploy Helm chart
    - uses: 'sylus/helm@master'
      env:
        KUBECONFIG: /github/home/KUBECONFIG
      with:
        release: 'dremio'
        namespace: 'dremio'
        tiller-namespace: 'dremio'
        chart: './charts/stable/dremio'
        token: '${{ github.token }}'
        values: |
          image:
            repository: "${{ env.REGISTRY_NAME }}.azurecr.io/dremio"
            tag: "${{ github.sha }}"
          ingress:
            enabled: true
            hosts:
              - host: "dremio.${{ secrets.DOMAIN_NAME }}"
                paths:
                  - "/*"
            annotations:
              kubernetes.io/ingress.class: istio
          imagePullSecrets:
            - name: "${{ env.REGISTRY_NAME }}-registry-connection"
          destinationRule:
            enabled: true
            mode: DISABLE
          distStorage:
            type: "azureStorage"
            azureStorage: # AzureStorage gen2v2
              accountName: "${{ secrets.STORAGE_ACCOUNT_NAME }}"
              accessKey: "${{ secrets.STORAGE_ACCOUNT_KEY }}"
              filesystem: "dremio"
              path: "/"
